# -*- coding: utf-8 -*-
"""prediction-regression-round*.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1afdKv65ac-QpgqLIDeSTImkErbo7ZT1w

Json object where key is the post id and value is the predicted like count.
"""

import numpy as np
import pandas as pd
import gzip
import json

from pprint import pprint

import nltk
from nltk.corpus import stopwords

nltk.download('stopwords')
turkish_stopwords = stopwords.words('turkish')

import pandas as pd
import json
import numpy as np

def validate_like_count(like_count):
    """
    Validate and format like count according to requirements:
    - Must be non-negative
    - Must be an integer
    """
    try:
        # Convert to float first to handle various numeric formats
        like_float = float(like_count)

        # Round to nearest integer
        like_int = int(round(like_float))

        # Ensure non-negative
        like_int = max(0, like_int)

        return like_int

    except (ValueError, TypeError):
        raise ValueError(f"Invalid like count: {like_count}. Must be a valid number.")

def process_post_data(post_data_csv):
    """
    Process post data for like count prediction task
    """
    df = pd.read_csv(post_data_csv)
    print("Available features for like count prediction:")
    print("\nPost Features:")
    for col in df.columns:
        print(f"- {col}")

    print("\nSample of post data:")
    print(df.head())

    return df

def save_regression_predictions(predictions, round_number):
    """
    Save regression predictions in required format with validation
    predictions: dict with post_id as key and predicted like_count as value
    """
    # Validate and clean all predictions
    validated_predictions = {}
    validation_errors = []

    for post_id, likes in predictions.items():
        try:
            # Validate and format like count
            validated_likes = validate_like_count(likes)
            validated_predictions[post_id] = validated_likes

        except ValueError as e:
            validation_errors.append(f"Error with prediction for post {post_id}: {str(e)}")

    # If there were any errors, print them and return
    if validation_errors:
        print("\nValidation errors found:")
        for error in validation_errors:
            print(error)
        print("\nPlease fix these predictions before continuing.")
        return None

    # All predictions are valid, save to file
    output_file = f'prediction-regression-round{round_number}.json'
    with open(output_file, 'w') as f:
        json.dump(validated_predictions, f, indent=2)
    print(f"\nSuccessfully saved regression predictions to {output_file}")
    print("All like counts are valid non-negative integers")

if __name__ == "__main__":
    # Process post data
    post_df = process_post_data('post_data.csv')

    # Example of correct and incorrect predictions
    sample_predictions = {
        "post1": 1500.6,    # Will be rounded to 1501
        "post2": 2750,      # Correct: integer
        "post3": -10,       # Will be converted to 0
        "post4": "invalid", # Will raise error
        "post5": 3.14       # Will be rounded to 3
    }

    # Save predictions
    save_regression_predictions(sample_predictions, round_number=1)